Below is a complete, end-to-end deployment guide for suitX, using the repository’s actual configuration and manifests. It covers both backend (Spring Boot + MongoDB) and frontend (Vite + React) deployments, including environment variables, hosting on Render and Vercel, and local validation steps.

Key files referenced:
- Render config: [render.yaml](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/render.yaml)
- Backend Dockerfile: [backend/Dockerfile](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/backend/Dockerfile)
- Backend properties: [backend/src/main/resources/application.properties](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/backend/src/main/resources/application.properties)
- Backend POM: [backend/pom.xml](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/backend/pom.xml)
- Frontend Vercel config: [frontend/vercel.json](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/frontend/vercel.json)

Overview
- Backend: Spring Boot 3.5.x, Java 17, MongoDB, JWT, optional SMTP email, and Gemini API usage. Containerized with a multi-stage Dockerfile.
- Frontend: React + Vite + Tailwind, configured for SPA rewrites and Vercel deployment.
- Deploy targets:
  - Backend on Render.com (from render.yaml)
  - Frontend on Vercel (from vercel.json)

1) Prerequisites
- Accounts/services
  - GitHub repository access
  - MongoDB (Atlas or self-managed) connection string
  - Render.com account (for backend)
  - Vercel account (for frontend)
- Secrets/keys
  - MongoDB URI and database name
  - JWT secret (Render can auto-generate)
  - Gemini API key (for AI features)
  - SMTP credentials (if email is required)
- Local tooling (for validation, optional)
  - Java 17 (JDK) and Maven (or use the Maven Wrapper)
  - Node.js LTS for frontend
  - Docker (optional, for local container runs)

2) Environment variables (backend)
The backend reads configuration from environment variables via Spring Boot relaxed binding and application.properties.

Defined in application.properties:
- MongoDB
  - SPRING_DATA_MONGODB_URI
  - SPRING_DATA_MONGODB_DATABASE
- JWT
  - JWT_SECRET
- AI (Gemini)
  - GEMINI_API_KEY
  - gemini.api.url (defaults to https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent)
- Email (optional)
  - SPRING_MAIL_HOST (default smtp.gmail.com)
  - SPRING_MAIL_PORT (default 587)
  - SPRING_MAIL_USERNAME
  - SPRING_MAIL_PASSWORD
  - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH (default true)
  - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE (default true)
- CORS
  - ALLOWED_ORIGINS (defaults to http://localhost:5173 for dev)
- Misc
  - app.email.from (defaults to SPRING_MAIL_USERNAME or noreply@suitx.com)
  - server.port (set via env var SERVER_PORT; Render sample uses 8080)
  - SPRING_PROFILES_ACTIVE (Render sets prod)

Render manifest defaults (adjust as needed) are defined in [render.yaml](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/render.yaml):
- Service name: suitx-backend
- Runtime: docker (builds from backend/Dockerfile)
- Region: oregon (change as desired)
- Plan: free (consider starter/standard for production)
- Branch: main
- Health check: /
- Env vars:
  - SPRING_DATA_MONGODB_URI (set via dashboard)
  - SPRING_DATA_MONGODB_DATABASE (value: suitx)
  - JWT_SECRET (generateValue: true on Render)
  - SMTP vars (optional)
  - SERVER_PORT (8080)
  - SPRING_PROFILES_ACTIVE (prod)
  - ALLOWED_ORIGINS (set to your frontend URL)

3) Backend deployment to Render.com
A. Connect repository
- Push your code to GitHub on the main branch (as the manifest references main).
- In Render, create a new Blueprint deployment or import your repo. Render will detect [render.yaml](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/render.yaml) and configure services automatically.

B. Confirm service config (from render.yaml)
- Type: Web service
- Runtime: Docker
- Dockerfile path: ./backend/Dockerfile
- Docker context: ./backend
- Health check path: /
- Region/plan: Set as desired
- Branch: main (or your deployment branch)

C. Configure environment variables (Render dashboard)
- Required
  - SPRING_DATA_MONGODB_URI: your MongoDB connection string
  - SPRING_DATA_MONGODB_DATABASE: suitx (or your database name)
  - JWT_SECRET: can be auto-generated by Render per manifest
  - SPRING_PROFILES_ACTIVE: prod
  - SERVER_PORT: 8080
  - ALLOWED_ORIGINS: your frontend production URL (e.g., https://your-frontend.app)
- Optional (if email is used)
  - SPRING_MAIL_HOST: smtp.gmail.com
  - SPRING_MAIL_PORT: 587
  - SPRING_MAIL_USERNAME: your email username
  - SPRING_MAIL_PASSWORD: your email password or app password
  - SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
  - SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
- Optional (AI)
  - GEMINI_API_KEY: your Gemini API key

D. First deployment
- Trigger the deployment. Render will:
  - Build the Docker image from [backend/Dockerfile](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/backend/Dockerfile)
  - Run the container exposing port 8080
- After successful deploy, note the Render service URL (e.g., https://suitx-backend.onrender.com)

E. Post-deploy checks
- Health check: The service health check path is set to /. Verify your app responds there. If not, adjust Render’s healthCheckPath to a working endpoint (e.g., /api/health) and redeploy.
- CORS: Ensure ALLOWED_ORIGINS includes your actual frontend domain(s).

F. Scaling, logs, and monitoring
- Consider upgrading plan for production workloads.
- Use Render logs for troubleshooting startup or runtime errors.
- Add rate limits and secure secrets management in Render.

4) Frontend deployment to Vercel
The frontend uses Vite + React and includes a Vercel configuration at [frontend/vercel.json](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/frontend/vercel.json), which sets:
- buildCommand: npm run build
- outputDirectory: dist
- devCommand: npm run dev
- framework: vite
- SPA rewrites: all routes to /index.html

A. Configure Vercel project
- In Vercel, create a new project from the same GitHub repo.
- Set the “Root Directory” to frontend.
- Build & output settings:
  - Build Command: npm run build
  - Output Directory: dist
  - Install Command: npm install
- Framework preset: Vite (per vercel.json)

B. Frontend environment variables
- If the frontend needs an API base URL, set it in Vercel as an environment variable (for Vite, typical prefix is VITE_*, e.g., VITE_API_BASE_URL). Then, ensure the code reads that variable accordingly.
- Update the backend’s ALLOWED_ORIGINS to include your Vercel domain (e.g., https://your-frontend.vercel.app and any custom domain).

C. Deploy
- Trigger the deployment. Vercel will build and host the SPA.
- Validate client-to-server calls against the Render backend.

5) Local verification (optional but recommended)
Backend
- From backend/, run:
  - Mac/Linux:
    - ./mvnw clean package
    - ./mvnw spring-boot:run
  - Windows:
    - mvnw.cmd clean package
    - mvnw.cmd spring-boot:run
- Set necessary env vars locally (use a shell or a local .env if you wire it in). A sample file exists at backend/src/main/resources/.env.example that you can use as a reference for key names.
- Default port: 8080 (if not overridden)

Backend via Docker (locally)
- Build: docker build -f backend/Dockerfile -t suitx-backend:local ./backend
- Run:
  - docker run --rm -p 8080:8080 \
    -e SPRING_DATA_MONGODB_URI="mongodb+srv://..." \
    -e SPRING_DATA_MONGODB_DATABASE="suitx" \
    -e JWT_SECRET="your-secret" \
    -e GEMINI_API_KEY="your-gemini-key" \
    -e ALLOWED_ORIGINS="http://localhost:5173" \
    suitx-backend:local

Frontend
- From frontend/, run:
  - npm install
  - npm run dev
- If the app expects an API base URL in dev, provide it (e.g., VITE_API_BASE_URL=http://localhost:8080). Then configure the frontend code to use it.

6) Production checklist
- Backend (Render)
  - Correct branch (main) and Docker context (backend)
  - All required env vars set (Mongo, JWT, Gemini key if used)
  - ALLOWED_ORIGINS includes your Vercel/custom domain
  - Health check path configured to a responsive endpoint
  - Logging level appropriate for prod
- Frontend (Vercel)
  - Root directory set to frontend
  - Build command, output directory, and SPA rewrites confirmed
  - Env vars provided (e.g., API base URL) and used by the code
  - Custom domain and HTTPS configured (optional)
- Database
  - Atlas/network access rules configured
  - Users/roles with least privileges
  - Connection string uses SRV + TLS as applicable
- Email (optional)
  - SMTP credentials validated (Gmail often requires app passwords or OAuth)
  - From address configured (app.email.from)
- Security
  - Strong JWT secret in production
  - CORS restricted to required origins
  - No secrets in the repo or client code
- Observability
  - Render/Vercel logs monitored
  - Consider adding an explicit health endpoint in backend for health checks

7) Common pitfalls and fixes
- 404 on health check at /
  - Change health check path in Render to an existing endpoint.
- CORS errors from frontend
  - Update backend ALLOWED_ORIGINS to your exact Vercel/custom domain, including protocol (https://).
- 5xx on startup (Mongo)
  - Verify SPRING_DATA_MONGODB_URI and network access; ensure database user has correct permissions.
- Email fails
  - Confirm SMTP host/port/credentials and that STARTTLS/auth flags are set to true.
- Missing AI features
  - Ensure GEMINI_API_KEY is set and the backend is reading it (see application.properties).

References (exact files in repo)
- Render blueprint: [render.yaml](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/render.yaml)
- Backend Dockerfile: [backend/Dockerfile](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/backend/Dockerfile)
- Backend configuration: [backend/src/main/resources/application.properties](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/backend/src/main/resources/application.properties)
- Backend Maven config: [backend/pom.xml](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/backend/pom.xml)
- Frontend Vercel config: [frontend/vercel.json](https://github.com/K-M-Shehan/suitX/blob/6defceb71d2f3c9d5760f554772f1c11ae281b8a/frontend/vercel.json)

